/*****
 
 All the resources for this project:
 https://randomnerdtutorials.com/
 
*****/

// Loading the ESP8266WiFi library and the PubSubClient library
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Servo.h>

Servo servo ; 
Servo servo2 ;
// Change the credentials below, so your ESP8266 connects to your router
const char* ssid = "iPhone";
const char* password = "nfng5453";

// Change the variable to your Raspberry Pi IP address, so it connects to your MQTT broker
const char* mqtt_server = "172.20.10.4";

// Initializes the espClient
WiFiClient espClient;
PubSubClient client(espClient);

//gas 
unsigned long lastUpdate;
int GAS_DO = 10;
int state =0;
int laststate = 0;
#define BUZZER_PIN D1

// Connect an LED to each GPIO of your ESP8266
//const int ledGPIO5 = 5;
//const int ledGPIO4 = 4;
const int ledGPIO2 = 2;
// Don't change the function below. This functions connects your ESP8266 to your router
void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("WiFi connected - ESP IP address: ");
  Serial.println(WiFi.localIP());
}

// This functions is executed when some device publishes a message to a topic that your ESP8266 is subscribed to
// Change the function below to add logic to your program, so when a device publishes a message to a topic that 
// your ESP8266 is subscribed you can actually do something
void callback(String topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();

  // Feel free to add more if statements to control more GPIOs with MQTT

  // If a message is received on the topic home/office/esp1/gpio2, you check if the message is either 1 or 0. Turns the ESP GPIO according to the message
  if(topic=="esp8266/2"){
      Serial.print("Changing GPIO 2 to ");
      if(messageTemp == "1"){
        //digitalWrite(ledGPIO2, HIGH);
        Serial.print("On");
        servo.write(180);
        delay(1000);
        //servo.write(0);
        //delay(1000);
      }
      else if(messageTemp == "0"){
        //digitalWrite(ledGPIO2, LOW);
        Serial.print("Off");
        servo.write(0);
        delay(1000);
      }
  }
 
  Serial.println();
}

// This functions reconnects your ESP8266 to your MQTT broker
// Change the function below if you want to subscribe to more topics with your ESP8266 
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
     /*
     YOU  NEED TO CHANGE THIS NEXT LINE, IF YOU'RE HAVING PROBLEMS WITH MQTT MULTIPLE CONNECTIONS
     To change the ESP device ID, you will have to give a unique name to the ESP8266.
     Here's how it looks like now:
       if (client.connect("ESP8266Client")) {
     If you want more devices connected to the MQTT broker, you can do it like this:
       if (client.connect("ESPOffice")) {
     Then, for the other ESP:
       if (client.connect("ESPGarage")) {
      That should solve your MQTT multiple connections problem

     THE SECTION IN loop() function should match your device name
    */
    if (client.connect("ESP8266Client2")) {
      Serial.println("connected");  
      // Subscribe or resubscribe to a topic
      // You can subscribe to more topics (to control more LEDs in this example)
      client.subscribe("esp8266/2");
      //client.subscribe("esp8266/5");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

// The setup function sets your ESP GPIOs to Outputs, starts the serial communication at a baud rate of 115200
// Sets your mqtt broker and sets the callback function
// The callback function is what receives messages and actually controls the LEDs
void setup() {
   pinMode(BUILTIN_LED, OUTPUT);
  digitalWrite(BUILTIN_LED, HIGH);

   pinMode(GAS_DO,INPUT);
   servo.attach(2);  //D4  -- 4 if D2 
  servo.write(0);
  delay(2000);
   servo2.attach(0);  //D3  -- 4 if D2 
  servo2.write(0);
    delay(2000);

  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  //reconnect();
}

// For this project, you don't need to change anything in the loop function. 
// Basically it ensures that you ESP is connected to your broker
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  if(!client.loop())
  client.connect("ESP8266Client2");
     /*
     YOU  NEED TO CHANGE THIS NEXT LINE, IF YOU'RE HAVING PROBLEMS WITH MQTT MULTIPLE CONNECTIONS
     To change the ESP device ID, you will have to give a unique name to the ESP8266.
     Here's how it looks like now:
       client.connect("ESP8266Client");
     If you want more devices connected to the MQTT broker, you can do it like this:
       client.connect("ESPOffice");
     Then, for the other ESP:
       client.connect("ESPGarage");
      That should solve your MQTT multiple connections problem

     THE SECTION IN recionnect() function should match your device name
    */
    
    //client.loop();
    state=digitalRead(GAS_DO);
    if((state!=laststate) && ((millis()-lastUpdate)>60000)){
    lastUpdate=millis();
    if(state==HIGH){
    Serial.println("no lpg leakage");
    digitalWrite(BUILTIN_LED,HIGH);
    client.publish("/esp8266/LPGStatus","OFF");
    
    }
    else{
    digitalWrite(BUILTIN_LED,LOW);
    client.publish("/esp8266/LPGStatus","ON");
    Serial.println("GAS is leakage");
    
    }
    delay(50);
    laststate=state;
    }
    if(state==LOW){
    
    playTune(BUZZER_PIN,2000,200);
    }
    if(state==LOW){
    servo2.write(180);
    
    //delay(1000);
    }
    
}

void playTune(int _pin,int _frequency,int _length){
analogWriteFreq(_frequency);
analogWrite(_pin,512);
delay(_length);
analogWrite(_pin,0);
 
}